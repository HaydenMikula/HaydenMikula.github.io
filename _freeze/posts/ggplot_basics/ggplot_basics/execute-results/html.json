{
  "hash": "f6efd1b11a15514e8e051f6f1360c3ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot Basics\"\nformat: html\ndate: 2025-02-18\ncategories: [R, ggplot]\nimage: R_image.png\nexecute: \n  warning: false\n  message: false\ntoc: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n### Aesthetic Mappings\n\nIn ggplot, there are certain aesthetics that can be mapped to the data\nof a visualization. Some of these aesthetics are:\n\n-   Size (in millimeters)\n-   Shape (from 0 to 25, see below)\n-   Color\n-   Fill\n-   Alpha Transparency (from 0 to 1)\n\n![](shapes.png)\n\nAesthetics can be mapped uniformly to all data, or split up according to\ncertain categorical observations that exist within the data set.\n\nThis applies to all aesthetic values that can be altered.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uniform\nggplot(data = mpg, aes(x = hwy,\n                       y = displ)) +\n  geom_point(color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split\nggplot(data = mpg, aes(x = hwy,\n                       y = displ,\n                       color = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Facet Wrapping\n\nTo split our visualization by a certain categorical variable, we can use\nfacet_wrap(\\~var)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = \n               aes(x = displ, \n                   y = hwy), \n             alpha = .5) + \n  facet_wrap(~class)\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nSimilarly, we can split a visualization across 2 variables using\nfacet_grid(var1\\~var2)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = \n               aes(x = displ, \n                   y = hwy),\n             alpha = .5) + \n  facet_grid(drv ~ cyl)\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Geometric Objects\n\nUsing the different kinds of geom\\_\\*() functions, we can visualize data\nin multiple ways\n\nExamples of geom\\_\\*() functions:\n\n-   geom_bar(): Bar Chart\n-   geom_histogram(): Histogram\n-   geom_line(): Line Graph\n-   geom_boxplot(): Box Plot\n-   geom_point(): Scatterplot\n-   geom_smooth(): Fitted Line (with error range)\n\nMultiple of each geom\\_\\*() can be used in a visualization to represent\ndata differently\n\n\n### Statistical Transformations\n\nThere are many ways that data can be represented / changed in order to\nbetter convey the point you are trying to show through a visualization.\nWe may employ a log transformation on data sets with larger values to\nbetter visualize smaller (%) changes, for example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsale_df <- read_csv(\"https://bcdanl.github.io/data/home_sales_nyc.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Without transformation\nggplot(data=sale_df, aes(x=sale_price), bins = 500) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# With transformation\nggplot(data=sale_df, aes(x=log(sale_price)), bins = 500) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nWith transformations, large values and skewed data become much more\ninterpretable.\n\n### Count vs. Proportion\n\nWith geometric objects that count the number of instances for a value\n(such as geom_bar() or geom_histogram()), we can also use a proportion\nof the entire data set to represent the data with after_stat() or stat()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut))\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 y = after_stat(prop), \n                 group = 1))\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Position Adjustment\n\nSome geometric objects have the ability to have their 'positions'\nadjusted, meaning that they are able to be further split categorically\nin multiple ways.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# No Adjustment\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = cut))\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Position = 'stack'\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Position = \"dodge\"\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Position = 'fill'\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n### ggplot Grammar\n\n- DATA\n- GEOM_FUNCTION\n- MAPPINGS\n- STAT\n- POSITION\n- COORDINATE_FUNCTION\n- FACET_FUNCTION\n- SCALE_FUNCTIONS\n- GUIDES\n- THEME\n\n\n### ggplot Themes\n\nTo assist in presentation and accessibility, there are themes that alter the coloration of a visualization. For example:\n\n- theme_gray()\n- theme_bw()\n- theme_linedraw()\n- theme_light()\n- theme_dark()\n- theme_minimal()\n- theme_classic()\n- theme_void()\n- theme_test()\n\nThe ggthemes package comes with some additional themes:\n\n- theme_economist()\n- theme_wsj()\n- theme_fivethirtyeight()\n- theme_map()\n\n\nThere are also color palettes that allow for increased accessibility for the colorblind, such as:\n\n- scale_color_tableau()\n- scale_color_colorblind()\n\n\n### Saving plots\n\nWe can use ggsave() to save a ggplot output as a .png or .pdf file\n\n- Syntax: ggsave(filename = \"---.png\", plot = ---)\n\nOptionally, we can alter the dimensions of the figure being output\n\n- ggsave('filename.png', plot = ---, height = ---, width = ---, units = ---)",
    "supporting": [
      "ggplot_basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}