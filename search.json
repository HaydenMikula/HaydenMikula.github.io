[
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hayden Mikula",
    "section": "",
    "text": "Hayden Mikula majors in Data Analytics at SUNY Geneseo."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Hayden Mikula",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2022 - May 2026  Minor in Edgar Fellows Honors Program"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Hayden Mikula",
    "section": "Experience",
    "text": "Experience\nStarbucks Analytics | Data Analyst Intern | May 2024 - Aug 2024"
  },
  {
    "objectID": "danl-310-quarto-r.html",
    "href": "danl-310-quarto-r.html",
    "title": "Quarto with R",
    "section": "",
    "text": "“Tidy datasets are all alike, but every messy dataset is messy in its own way.” — Hadley Wickham\n\nR is a powerful language and environment for statistical computing and graphics. It is widely used among statisticians and data analysts for data analysis and developing statistical software. Here are some basic concepts and elements of R to help you get started:\n\n\n\nVariables in R are used to store data. You can create a variable using the assignment operator &lt;- (option/Alt + -). For example:\n\n\nCode\nmy_variable &lt;- 10\n\n\nThis will store the value 10 in my_variable.\n\n\n\n\n\nR has several basic data types:\n\nNumeric: For decimal values like 2.5.\nInteger: For whole numbers like 2L (the L tells R it is an integer).\nCharacter: For text or string values, e.g., \"Hello\".\nLogical: For boolean values (TRUE or FALSE).\n\n\n\n\n\n\nVectors are a basic data structure in R. They contain elements of the same type. You can create a vector using the c() function:\n\n\nCode\nmy_vector &lt;- c(1, 2, 3, 4, 5)\n\n\n\n\n\n\nData frames are used for storing data tables in R. It is a list of vectors of equal length. For example, to create a simple data frame:\n\n\nCode\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\"), \n  Age = c(25, 30)\n  )\n\n\n\n\n\n\nFunctions are used to carry out specific tasks in R. For example, sum() is a function that adds numbers together:\n\n\nCode\nsum(1, 2, 3) # Returns 6\n\n\n[1] 6\n\n\n\n\n\n\nR has a vast collection of packages for various statistical tasks. You can install a package using install.packages(\"packageName\") and load it using library(packageName).\n\n\nCode\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n\n\n\n\nTo get help on a specific function or topic, use the help() function or the shorthand ?, like ?sum on R Console."
  },
  {
    "objectID": "danl-310-quarto-r.html#variables",
    "href": "danl-310-quarto-r.html#variables",
    "title": "Quarto with R",
    "section": "",
    "text": "Variables in R are used to store data. You can create a variable using the assignment operator &lt;- (option/Alt + -). For example:\n\n\nCode\nmy_variable &lt;- 10\n\n\nThis will store the value 10 in my_variable."
  },
  {
    "objectID": "danl-310-quarto-r.html#data-types",
    "href": "danl-310-quarto-r.html#data-types",
    "title": "Quarto with R",
    "section": "",
    "text": "R has several basic data types:\n\nNumeric: For decimal values like 2.5.\nInteger: For whole numbers like 2L (the L tells R it is an integer).\nCharacter: For text or string values, e.g., \"Hello\".\nLogical: For boolean values (TRUE or FALSE)."
  },
  {
    "objectID": "danl-310-quarto-r.html#vectors",
    "href": "danl-310-quarto-r.html#vectors",
    "title": "Quarto with R",
    "section": "",
    "text": "Vectors are a basic data structure in R. They contain elements of the same type. You can create a vector using the c() function:\n\n\nCode\nmy_vector &lt;- c(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "danl-310-quarto-r.html#data-frames",
    "href": "danl-310-quarto-r.html#data-frames",
    "title": "Quarto with R",
    "section": "",
    "text": "Data frames are used for storing data tables in R. It is a list of vectors of equal length. For example, to create a simple data frame:\n\n\nCode\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\"), \n  Age = c(25, 30)\n  )"
  },
  {
    "objectID": "danl-310-quarto-r.html#functions",
    "href": "danl-310-quarto-r.html#functions",
    "title": "Quarto with R",
    "section": "",
    "text": "Functions are used to carry out specific tasks in R. For example, sum() is a function that adds numbers together:\n\n\nCode\nsum(1, 2, 3) # Returns 6\n\n\n[1] 6"
  },
  {
    "objectID": "danl-310-quarto-r.html#packages",
    "href": "danl-310-quarto-r.html#packages",
    "title": "Quarto with R",
    "section": "",
    "text": "R has a vast collection of packages for various statistical tasks. You can install a package using install.packages(\"packageName\") and load it using library(packageName).\n\n\nCode\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)"
  },
  {
    "objectID": "danl-310-quarto-r.html#help-system",
    "href": "danl-310-quarto-r.html#help-system",
    "title": "Quarto with R",
    "section": "",
    "text": "To get help on a specific function or topic, use the help() function or the shorthand ?, like ?sum on R Console."
  },
  {
    "objectID": "danl-310-quarto-r.html#key-concepts",
    "href": "danl-310-quarto-r.html#key-concepts",
    "title": "Quarto with R",
    "section": "2.1 Key Concepts",
    "text": "2.1 Key Concepts\n\nData: The raw data that you want to plot.\naes() (Aesthetic Mappings): Defines how data are mapped to color, size, shape, and other visual properties.\nGeoms (Geometric Objects): The type of objects that represent data points, like points, lines, bars, etc.\nFacets: For creating small multiples, splitting data into subsets and displaying the same plot for each subset.\nScales: Control how data values are translated to visual properties.\nCoordinate Systems: The plane in which data is plotted, e.g., Cartesian, polar.\nThemes: Control the overall appearance of the plot, like background color, grid lines, and font sizes."
  },
  {
    "objectID": "danl-310-quarto-r.html#examples",
    "href": "danl-310-quarto-r.html#examples",
    "title": "Quarto with R",
    "section": "2.2 Examples",
    "text": "2.2 Examples\nLet’s go through some examples to illustrate how ggplot can be used to create different types of visualizations.\n\n2.2.1 Scatter Plot\nCreating a scatter plot to explore the relationship between two variables, say mpg (miles per gallon) and wt (weight of the car) from the mtcars dataset.\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) + \n  geom_point() +\n  labs(x = \"Weight of Car\", y = \"Miles Per Gallon\",\n       title = \"Scatter plot of MPG vs Car Weight\")\n\n\n\n\n\n\n\n\n\nThis code block creates a scatter plot where car weight is on the x-axis and miles per gallon on the y-axis. Each point represents a car.\n\n\n2.2.2 Bar Chart\nCreating a bar chart to show the count of cars by the number of cylinders.\n\n\nCode\nggplot(mtcars, aes(x = factor(cyl))) + \n  geom_bar() + \n  labs(x = \"Number of Cylinders\", y = \"Count\",\n       title = \"Count of Cars by Cylinders\")\n\n\n\n\n\n\n\n\n\nThis plots a bar chart where each bar represents the count of cars with a certain number of cylinders.\n\n\n2.2.3 Line Graph\nPlotting a line graph, assuming we have a time series data.frame economics that is part of ggplot2 package.\n\n\nCode\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line() +\n  labs(x = \"Year\", y = \"Number of Unemployed Persons\",\n       title = \"Unemployment over Time\") \n\n\n\n\n\n\n\n\n\nThis code plots the unemployment numbers over time, with time on the x-axis and the number of unemployed persons on the y-axis.\n\n\n2.2.4 Faceted Plot\nCreating a faceted plot to compare scatter plots of mpg vs wt across different numbers of cylinders.\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) + \n  geom_point() +\n  facet_wrap(~cyl) +\n  labs(title = \"MPG vs Weight by Number of Cylinders\")\n\n\n\n\n\n\n\n\n\nThis splits the data into subsets based on the number of cylinders and creates a scatter plot for each subset."
  },
  {
    "objectID": "danl-310-quarto-r.html#conclusion",
    "href": "danl-310-quarto-r.html#conclusion",
    "title": "Quarto with R",
    "section": "2.3 Conclusion",
    "text": "2.3 Conclusion\nggplot2 provides a powerful and flexible system for making a wide variety of plots. By understanding the grammar of graphics upon which it is based, you can build up complex visualizations from simple components, allowing for a deep and intuitive exploration of data."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nggplot Basics\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nFeb 17, 2025\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html",
    "href": "posts/python_basics/danl-210-python-basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html#what-is-python",
    "href": "posts/python_basics/danl-210-python-basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html#variables-and-data-types",
    "href": "posts/python_basics/danl-210-python-basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html#control-structures",
    "href": "posts/python_basics/danl-210-python-basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html#functions",
    "href": "posts/python_basics/danl-210-python-basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/python_basics/danl-210-python-basic.html#lists-and-dictionaries",
    "href": "posts/python_basics/danl-210-python-basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html",
    "href": "posts/python_basics/python_basics_4&5.html",
    "title": "Python Basics",
    "section": "",
    "text": "A ‘value’ in Python is any amount of data, no matter what type\nExamples of values:\n\n10 #Integer\n'Hello' # String\n5.71 # Float\nTrue # Bool\n\nWhen these values are assigned to a data container, they become ‘variables’\nVariables are capable of storing one or more values for use in data collection, transformation, etc.\n\na = 10 # 'a' is the name of the variable\nprint(a)\nexample_list = [20, 9, True, 'string']\n\n10"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#values-variables-and-types",
    "href": "posts/python_basics/python_basics_4&5.html#values-variables-and-types",
    "title": "Python Basics",
    "section": "",
    "text": "A ‘value’ in Python is any amount of data, no matter what type\nExamples of values:\n\n10 #Integer\n'Hello' # String\n5.71 # Float\nTrue # Bool\n\nWhen these values are assigned to a data container, they become ‘variables’\nVariables are capable of storing one or more values for use in data collection, transformation, etc.\n\na = 10 # 'a' is the name of the variable\nprint(a)\nexample_list = [20, 9, True, 'string']\n\n10"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#data-frames",
    "href": "posts/python_basics/python_basics_4&5.html#data-frames",
    "title": "Python Basics",
    "section": "Data Frames",
    "text": "Data Frames\nA ‘data.frame’ is a format of data structure that stores data using observations (rows) and variables (columns). Each individual value corresponds to a ‘cell’, which has meaning based on its associated row index and variable.\nExample:\n\nimport pandas as pd\nnba = pd.read_csv(\"https://bcdanl.github.io/data/nba.csv\")\nnba\n\n\n  \n    \n\n\n\n\n\n\nName\nTeam\nPosition\nBirthday\nSalary\n\n\n\n\n0\nShake Milton\nPhiladelphia 76ers\nSG\n9/26/96\n1445697\n\n\n1\nChristian Wood\nDetroit Pistons\nPF\n9/27/95\n1645357\n\n\n2\nPJ Washington\nCharlotte Hornets\nPF\n8/23/98\n3831840\n\n\n3\nDerrick Rose\nDetroit Pistons\nPG\n10/4/88\n7317074\n\n\n4\nMarial Shayok\nPhiladelphia 76ers\nG\n7/26/95\n79568\n\n\n...\n...\n...\n...\n...\n...\n\n\n445\nAustin Rivers\nHouston Rockets\nPG\n8/1/92\n2174310\n\n\n446\nHarry Giles\nSacramento Kings\nPF\n4/22/98\n2578800\n\n\n447\nRobin Lopez\nMilwaukee Bucks\nC\n4/1/88\n4767000\n\n\n448\nCollin Sexton\nCleveland Cavaliers\nPG\n1/4/99\n4764960\n\n\n449\nRicky Rubio\nPhoenix Suns\nPG\n10/21/90\n16200000\n\n\n\n\n450 rows × 5 columns"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#lists-dictionaries-and-slicing",
    "href": "posts/python_basics/python_basics_4&5.html#lists-dictionaries-and-slicing",
    "title": "Python Basics",
    "section": "Lists, Dictionaries, and Slicing",
    "text": "Lists, Dictionaries, and Slicing\nAs previously shown, a ‘list’ is a data container that works in a singlular series of data (i.e. A single row of values). The values in a list are able to be gathered with [] (see below):\n\nexample_list\n\n[20, 9, True, 'string']\n\n\n\nexample_list[0] # Produces the FIRST value in the list, because Python begins counting at 0 instead of 1\n\n20\n\n\nA ‘dictionary’, in comparison, is a list that utilizes a key-value pair to identify values rather than a numerical index:\n\nexample_dict = {'a' : 10, 'b' : 14, 'c' : 'Hello'}\n  #example_dict[1] would not work, because dictionaries do not have numerical indexes\n\nprint(example_dict.keys())\nprint(example_dict.values())\n\nexample_dict['b']\n\ndict_keys(['a', 'b', 'c'])\ndict_values([10, 14, 'Hello'])\n\n\n14\n\n\nStrings and Lists can be ‘sliced’ with []\n\nFor strings, their characters are sliced\nFor lists, their individual values are sliced\n\nKinds of slicing:\n\n[ _ :]\n\nSlices from the indicated position to the end\n\n[ : _ ]\n\nSlices from the beginning to the indicated position\n\n[ _ : _ ]\n\nSlices from the (left) indicated position to the (right) indicated position\n\nCan add an additional ’: _’ at the end of any of these slicing methods to indicate the ‘step’ of the slicing (eg. A step of ‘2’ = every other value).\n\n\n\n\neg_string = \"Hello, I am a string.\"\nprint(eg_string[4]) # 5th character, starting at 0\n\nprint(example_list[-1]) # Last item in the list\n\nprint(eg_string[3:13]) # Characters starting at position 3 and ending at position 13\n\no\nstring\nlo, I am a"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#operators",
    "href": "posts/python_basics/python_basics_4&5.html#operators",
    "title": "Python Basics",
    "section": "Operators",
    "text": "Operators\nPython includes symbols that work as operations that act on data, including:\n\n‘+’ for addition\n‘-’ for subtraction\n’*’ for multiplication\n‘/’ for division\n’**’ for exponents\n‘//’ for integer division\n\nThese operations work on most data types, though some work better than others. For example:\n\nstring_1 = \"My name is\"\nstring_2 = \"Steven\"\nprint(string_1 + \" \" + string_2)\n  #string_1 - string_2 would not work; subtraction is not supported by strings\nprint((string_2 + ' ') * 4)\n\nMy name is Steven\nSteven Steven Steven Steven"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#value-conversion",
    "href": "posts/python_basics/python_basics_4&5.html#value-conversion",
    "title": "Python Basics",
    "section": "Value Conversion",
    "text": "Value Conversion\nWe are able to alter a value’s ‘type’ with built-in Python functions, such as:\n\nint()\nfloat()\nstr()\nbool()\n\n\neg_int = int(29.75)\neg_float = float(10)\neg_str = str(92)\neg_bool = bool(0)\n\nprint(eg_int)\nprint(eg_float)\nprint(eg_str)\nprint(eg_bool)\n\n29\n10.0\n92\nFalse"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#boolean-conditions",
    "href": "posts/python_basics/python_basics_4&5.html#boolean-conditions",
    "title": "Python Basics",
    "section": "Boolean Conditions",
    "text": "Boolean Conditions\nBoolean conditions are operations which result in a boolean ‘True’ or ‘False’ value, and are used to either filter the data we are looking at or proceed with an action based on the True/False value of the condition.\n\nprint(10 == 20) # False\nprint(20 == '20') # False\n\nFalse\nFalse\n\n\nKinds of conditions (using x/y as placeholders for data):\n\nx and y\n\n“Are both x and y True?”\n\nx or y\n\n“Is either x or y True?”\n\nnot x\n\n“Is x False?”\n\nx in y\n\n“Does x exist within y?”\n\nx == y\n\n“Is x equal to y?”\n\nx != y\n\n“Is x not equal to y?”\n\nx &gt; y\n\n“Is x greater than y?”\n\nx &gt;= y\n\n“Is x greater than or equal to y?”\n\nx &lt; y\n\n“Is x less than y?”\n\nx &lt;= y\n\n“Is x less than or equal to y?”\n\n\n‘if’ statements are lines of code that run when the outlined condition is met\n\nnum = 20\nif num == 20:\n  print('That is correct!')\n\nThat is correct!\n\n\n‘else’ statements are lines of code that are run when the outlined condition of an ‘if’ statement is NOT met\n\nnum = 15\nif num == 20:\n  print('That is correct!')\nelse:\n  print('That is incorrect...')\n\nThat is incorrect...\n\n\n‘elif’ statements are lines of code that are run when the previous ‘if’ or ‘elif’ condition is not met\n\nnum = 0\nif num == 20:\n  print('That is correct!')\nelif 18 &lt;= num &lt; 20:\n  print(\"You're getting closer.\")\nelif num &gt; 20:\n  print('Too far!')\nelse:\n  print(\"Too low!\")\n\nToo low!"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#while-and-for-loops",
    "href": "posts/python_basics/python_basics_4&5.html#while-and-for-loops",
    "title": "Python Basics",
    "section": "While and For loops",
    "text": "While and For loops\n\nA ‘while’ loop carries out a set of instructions for as long as a certain condition is met\nA ‘for’ loop iterates on a data container and carries out a set of instructions for as many times as the container is iterated\n\n‘continue’ is used to skip to the end of the loop\n‘break’ is used to stop the loop\n\n\n\ncount = 1\nwhile count &lt;= 5:\n    print(count)\n    count += 1\n\n1\n2\n3\n4\n5\n\n\n\nword = 'thud'\nfor letter in word:\n    print(letter)\n\nt\nh\nu\nd\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\nword = 'thud'\nfor letter in word:\n    if letter == 'u':\n        break # Ends the loop before it can finish fully\n    print(letter)\n\nt\nh\n\n\n\nword = 'thud'\nfor letter in word:\n    if letter == 'u':\n        continue # Skips over the print() function for 'u'\n    print(letter)\n\nt\nh\nd"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#list-comprehension",
    "href": "posts/python_basics/python_basics_4&5.html#list-comprehension",
    "title": "Python Basics",
    "section": "List Comprehension",
    "text": "List Comprehension\nA way of creating or filtering list values using conditions\n\nSyntax: listname_new = [ _ for _ in listname_old if ‘condition’ ]\n\n\nnumbers = list(range(1, 21))\nprint(numbers)\n\nevens = [num for num in numbers if num % 2 == 0]\nprint(evens)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#dictionary-comprehension",
    "href": "posts/python_basics/python_basics_4&5.html#dictionary-comprehension",
    "title": "Python Basics",
    "section": "Dictionary Comprehension",
    "text": "Dictionary Comprehension\nA way of creating or filtering dictionary keys / values using conditions\n\nSyntax: dictname_new = { k:v for k, v in dictname_old if ‘condition’ }\n\n\n# Filtering\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfiltered_dict = {k: v for k, v in my_dict.items() if v != 2}\nprint(filtered_dict)\n\n# Swapping Values\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nswapped_dict = {v: k for k, v in original_dict.items()}\nprint(swapped_dict)\n\n{'a': 1, 'c': 3, 'd': 4}\n{1: 'a', 2: 'b', 3: 'c'}"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#list-dictionary-modification",
    "href": "posts/python_basics/python_basics_4&5.html#list-dictionary-modification",
    "title": "Python Basics",
    "section": "List / Dictionary Modification",
    "text": "List / Dictionary Modification\nA method (.__) can be used to modify certain aspects of lists and dictionaries\nLists\n\nlist.append(): Add a new item to the end of the list\nlist. remove(): Remove the FIRST occurrence of the specified value\ndel list[]: Deletes a list’s values by index rather than value\n\nDictionaries:\n\ndict.update({}): Add a new key-value pair or change an existing pair\ndel dict[]: Deletes a dictionary’s key-value pair based on the specified key"
  },
  {
    "objectID": "posts/python_basics/python_basics_4&5.html#try-except",
    "href": "posts/python_basics/python_basics_4&5.html#try-except",
    "title": "Python Basics",
    "section": "Try-Except",
    "text": "Try-Except\nTry-Except code blocks tries to run a block of code, and if an error is raised from attempting to run that code, then an exception is raised instead that is specified by the user.\nFor example:\n\neg_list = [1, 2, 3, 4, 5, 6]\nposition = 9\ntry:\n  print(eg_list[position])\nexcept:\n  print(f\"Invalid position. Expected a value between 0 and {len(eg_list)-1} but got '{position}' instead.\")\n\nInvalid position. Expected a value between 0 and 5 but got '9' instead."
  },
  {
    "objectID": "posts/ggplot_basics/ggplot_basics.html",
    "href": "posts/ggplot_basics/ggplot_basics.html",
    "title": "ggplot Basics",
    "section": "",
    "text": "library(tidyverse)\n\n\nAesthetic Mappings\nIn ggplot, there are certain aesthetics that can be mapped to the data of a visualization. Some of these aesthetics are:\n\nSize (in millimeters)\nShape (from 0 to 25, see below)\nColor\nFill\nAlpha Transparency (from 0 to 1)\n\n\nAesthetics can be mapped uniformly to all data, or split up according to certain categorical observations that exist within the data set.\nThis applies to all aesthetic values that can be altered.\n\n# Uniform\nggplot(data = mpg, aes(x = hwy,\n                       y = displ)) +\n  geom_point(color = \"blue\")\n\n\n\n\n\n\n\n\n\n# Split\nggplot(data = mpg, aes(x = hwy,\n                       y = displ,\n                       color = class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nFacet Wrapping\nTo split our visualization by a certain categorical variable, we can use facet_wrap(~var)\n\nggplot(data = mpg) + \n  geom_point(mapping = \n               aes(x = displ, \n                   y = hwy), \n             alpha = .5) + \n  facet_wrap(~class)\n\n\n\n\n\n\n\n\nSimilarly, we can split a visualization across 2 variables using facet_grid(var1~var2)\n\nggplot(data = mpg) + \n  geom_point(mapping = \n               aes(x = displ, \n                   y = hwy),\n             alpha = .5) + \n  facet_grid(drv ~ cyl)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects\nUsing the different kinds of geom_*() functions, we can visualize data in multiple ways\nExamples of geom_*() functions:\n\ngeom_bar(): Bar Chart\ngeom_histogram(): Histogram\ngeom_line(): Line Graph\ngeom_boxplot(): Box Plot\ngeom_point(): Scatterplot\ngeom_smooth(): Fitted Line (with error range)\n\nMultiple of each geom_*() can be used in a visualization to represent data differently\n\n\nStatistical Transformations\nThere are many ways that data can be represented / changed in order to better convey the point you are trying to show through a visualization. We may employ a log transformation on data sets with larger values to better visualize smaller (%) changes, for example.\n\nsale_df &lt;- read_csv(\"https://bcdanl.github.io/data/home_sales_nyc.csv\")\n\n\n# Without transformation\nggplot(data=sale_df, aes(x=sale_price), bins = 500) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n# With transformation\nggplot(data=sale_df, aes(x=log(sale_price)), bins = 500) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nWith transformations, large values and skewed data become much more interpretable.\n\n\nCount vs. Proportion\nWith geometric objects that count the number of instances for a value (such as geom_bar() or geom_histogram()), we can also use a proportion of the entire data set to represent the data with after_stat() or stat()\n\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut))\n\n\n\n\n\n\n\n\n\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 y = after_stat(prop), \n                 group = 1))\n\n\n\n\n\n\n\n\n\n\nPosition Adjustment\nSome geometric objects have the ability to have their ‘positions’ adjusted, meaning that they are able to be further split categorically in multiple ways.\n\n# No Adjustment\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = cut))\n\n\n\n\n\n\n\n\n\n# Position = 'stack'\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"stack\")\n\n\n\n\n\n\n\n\n\n# Position = \"dodge\"\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"dodge\")\n\n\n\n\n\n\n\n\n\n# Position = 'fill'\nggplot(data = diamonds) + \n  geom_bar(mapping = \n             aes(x = cut, \n                 fill = clarity),\n           position = \"fill\")\n\n\n\n\n\n\n\n\n\n\nggplot Grammar\n\nDATA\nGEOM_FUNCTION\nMAPPINGS\nSTAT\nPOSITION\nCOORDINATE_FUNCTION\nFACET_FUNCTION\nSCALE_FUNCTIONS\nGUIDES\nTHEME\n\n\n\nggplot Themes\nTo assist in presentation and accessibility, there are themes that alter the coloration of a visualization. For example:\n\ntheme_gray()\ntheme_bw()\ntheme_linedraw()\ntheme_light()\ntheme_dark()\ntheme_minimal()\ntheme_classic()\ntheme_void()\ntheme_test()\n\nThe ggthemes package comes with some additional themes:\n\ntheme_economist()\ntheme_wsj()\ntheme_fivethirtyeight()\ntheme_map()\n\nThere are also color palettes that allow for increased accessibility for the colorblind, such as:\n\nscale_color_tableau()\nscale_color_colorblind()\n\n\n\nSaving plots\nWe can use ggsave() to save a ggplot output as a .png or .pdf file\n\nSyntax: ggsave(filename = “—.png”, plot = —)\n\nOptionally, we can alter the dimensions of the figure being output\n\nggsave(‘filename.png’, plot = —, height = —, width = —, units = —)"
  }
]